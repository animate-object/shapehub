{"version":3,"sources":["__mock_server/data.js","__mock_server/server.js","lib/shape.ts","Shape.tsx","ShapeList.tsx","App.tsx","lib/api.ts","index.tsx"],"names":["COLORS","NAMES","LOCATIONS","randomFromList","list","Math","floor","random","length","circle","scaleFactor","type","radius","square","sideLength","rectangle","height","width","color","shapesAPI","limit","shapes","Array","fill","map","_","idx","generator","author","name","location","undefined","id","specialProperties","borderColor","label","array","i","j","shuffleInPlace","JSON","stringify","reduce","acc","shape","isSpecial","SHAPE_DESCRIPTORS","Circle","Square","Rectangle","QUADRILATERAL_INFO","ELLIPSE_INFO","commonProperties","backgroundColor","border","CircleEl","style","c","borderRadius","SquareEl","s","RectangleEl","r","ShapeView","value","onSelectShape","favorited","React","useState","showInfo","setShowInfo","className","getShapeElement","onClick","message","displayShape","split","key","ShapeList","favorites","has","App","setShapes","Set","setFavorites","activeView","setView","useEffect","apiData","decoded","parse","console","log","getShapes","from","Object","values","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RACaA,EAAS,CAClB,YACA,aACA,SACA,aACA,cACA,UACA,MACA,YACA,UACA,OACA,YACA,UACA,WACA,kBACA,gBACA,cACA,QACA,SACA,YACA,aACA,SACA,OACA,SACA,cACA,eACA,uBACA,WACA,YACA,gBACA,QACA,YACA,WACA,UACA,SACA,SACA,UACA,UACA,eACA,eACA,gBACA,aACA,aACA,aACA,cACA,SACA,SACA,YACA,gBACA,kBACA,cACA,aACA,YACA,OACA,YACA,YACA,aACA,oBACA,cACA,WACA,WACA,cACA,QACA,YACA,cACA,YACA,QACA,iBACA,mBACA,eACA,gBACA,WACA,OACA,OACA,OACA,YACA,gBACA,aACA,YACA,kBACA,gBACA,YACA,YACA,iBACA,aACA,YACA,aACA,OACA,OACA,eACA,WACA,iBACA,cACA,MACA,YACA,QACA,SACA,YACA,WACA,gBAISC,EAAQ,CACjB,OACA,QACA,QACA,UACA,OACA,OACA,MACA,WACA,UACA,QACA,OACA,MACA,SACA,WACA,OACA,WACA,UACA,QAGSC,EAAY,CACrB,UACA,QACA,QACA,OACA,UACA,SACA,UACA,SACA,QACA,WC9HEC,EAAiB,SAACC,GAAD,OAAUA,EAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,UAEhEC,EAAS,SAACC,GAAD,MAAkB,CAC7BC,KAAM,SACNC,OAAQP,KAAKC,MAAMD,KAAKE,UAAYG,EAAc,MAIhDG,EAAS,SAACH,GAAD,MAAkB,CAC7BC,KAAM,SACNG,WAAYT,KAAKC,MAAMD,KAAKE,SAAWG,KAGrCK,EAAY,SAACL,GAAD,MAAkB,CAChCC,KAAM,YACNK,OAAQX,KAAKC,MAAMD,KAAKE,SAAWG,GACnCO,MAAOZ,KAAKC,MAAMD,KAAKE,SAAWG,KAQhCQ,EAAQ,kBAAMf,EAAeH,IAatBmB,EAAY,SAACC,GACtB,IAAMC,EAASC,MAAMF,GAAOG,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAAJ,uBAnBvBhB,EAoBE,IAAsB,IAAhBL,KAAKE,SAnBZJ,EAAe,CAACM,EAAQM,EAAWF,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","file":"static/js/main.1ed5e63e.chunk.js","sourcesContent":["\nexport const COLORS = [\n    'indianred',\n    'lightcoral',\n    'salmon',\n    'darksalmon',\n    'lightsalmon',\n    'crimson',\n    'red',\n    'firebrick',\n    'darkred',\n    'pink',\n    'lightpink',\n    'hotpink',\n    'deeppink',\n    'mediumvioletred',\n    'palevioletred',\n    'lightsalmon',\n    'coral',\n    'tomato',\n    'orangered',\n    'darkorange',\n    'orange',\n    'gold',\n    'yellow',\n    'lightyellow',\n    'lemonchiffon',\n    'lightgoldenrodyellow',\n    'moccasin',\n    'peachpuff',\n    'palegoldenrod',\n    'khaki',\n    'darkkhaki',\n    'lavender',\n    'thistle',\n    'violet',\n    'orchid',\n    'fuchsia',\n    'magenta',\n    'mediumorchid',\n    'mediumpurple',\n    'rebeccapurple',\n    'blueviolet',\n    'darkviolet',\n    'darkorchid',\n    'darkmagenta',\n    'purple',\n    'indigo',\n    'slateblue',\n    'darkslateblue',\n    'mediumslateblue',\n    'greenyellow',\n    'chartreuse',\n    'lawngreen',\n    'lime',\n    'limegreen',\n    'palegreen',\n    'lightgreen',\n    'mediumspringgreen',\n    'springgreen',\n    'seagreen',\n    'seagreen',\n    'forestgreen',\n    'green',\n    'darkgreen',\n    'yellowgreen',\n    'olivedrab',\n    'olive',\n    'darkolivegreen',\n    'mediumaquamarine',\n    'darkseagreen',\n    'lightseagreen',\n    'darkcyan',\n    'teal',\n    'aqua',\n    'cyan',\n    'lightcyan',\n    'paleturquoise',\n    'aquamarine',\n    'turquoise',\n    'mediumturquoise',\n    'darkturquoise',\n    'cadetblue',\n    'steelblue',\n    'lightsteelblue',\n    'powderblue',\n    'lightblue',\n    'dodgerblue',\n    'blue',\n    'navy',\n    'midnightblue',\n    'cornsilk',\n    'blanchedalmond',\n    'navajowhite',\n    'tan',\n    'rosybrown',\n    'brown',\n    'maroon',\n    'mistyrose',\n    'seashell',\n    'antiquewhite'\n]\n\n\nexport const NAMES = [\n    'Amir',\n    'Yosef',\n    'Maria',\n    'Antonia',\n    'Carl',\n    'Maya',\n    'Sam',\n    'Samantha',\n    'LaTisha',\n    'Ibram',\n    'Noah',\n    'Kim',\n    'Esther',\n    'Patricia',\n    'Vera',\n    'Michelle',\n    'Fatimah',\n    'Yena'\n]\n\nexport const LOCATIONS = [\n    'Mercury',\n    'Venus',\n    'Earth',\n    'Mars',\n    'Jupiter',\n    'Saturn',\n    'Neptune',\n    'Uranus',\n    'Pluto',\n    'Belarus'\n]","import { COLORS, NAMES, LOCATIONS } from \"./data\"\n\nconst shuffleInPlace = (array) => {\n    for (let i = array.length - 1; i > 0; i --) {\n        const j = Math.floor(Math.random() * ( i + 1));\n        [array[i], array[j]] = [array[j], array[i]]\n    }\n}\n\nconst randomFromList = (list) => list[Math.floor(Math.random() * list.length)]\n\nconst circle = (scaleFactor) => ({\n    type: 'Circle',\n    radius: Math.floor(Math.random() * (scaleFactor / 2))\n})\n\n\nconst square = (scaleFactor) => ({\n    type: 'Square',\n    sideLength: Math.floor(Math.random() * scaleFactor)\n})\n\nconst rectangle = (scaleFactor) => ({\n    type: 'Rectangle',\n    height: Math.floor(Math.random() * scaleFactor),\n    width: Math.floor(Math.random() * scaleFactor)\n})\n\nconst randomShape = (scaleFactor) => {\n    const generator = randomFromList([circle, rectangle, square])\n    return generator(scaleFactor)\n}\n\nconst color = () => randomFromList(COLORS)\n\nconst author = () => ({\n    name: randomFromList(NAMES),\n    location: Math.random() > 0.8 ? randomFromList(LOCATIONS) : undefined\n})\n\nconst special = () => ({\n        borderColor: color(),\n        label: `I'm a ${randomFromList([5, 6, 7, 8, 9, 10])} ⭐ shape!`\n})\n\n\nexport const shapesAPI = (limit) => {\n    const shapes = Array(limit).fill(0).map((_, idx) => ({\n        ...randomShape(200 + Math.random() * 500),\n        color: color(),\n        author: Math.random() > .5 ? author() : undefined,\n        id: idx,\n        specialProperties: Math.random() > .97 ? special() : undefined\n    }))\n    shuffleInPlace(shapes)\n\n    return JSON.stringify(shapes.reduce(\n        (acc, shape) => ({...acc, [shape.id]: shape}), {}\n    ))\n}","import { Author } from \"./author\";\n\n// Union type\ntype ShapeType = \"Circle\" | \"Rectangle\" | \"Square\";\n\ninterface SpecialProperties {\n  label: string;\n  borderColor: string;\n}\n\ninterface BaseShape {\n  id: number;\n  type: ShapeType;\n  color: string;\n  author?: Author;\n  specialProperties?: SpecialProperties;\n}\n\nexport interface Circle extends BaseShape {\n  type: \"Circle\";\n  radius: number;\n}\n\nexport interface Square extends BaseShape {\n  type: \"Square\";\n  sideLength: number;\n}\n\nexport interface Rectangle extends BaseShape {\n  type: \"Rectangle\";\n  height: number;\n  width: number;\n}\n\n// Discriminated Unions::\n// The interfaces unioned under Shape share a special property called a `Discriminant`\n// The `Discriminant` is a statically defined primitive (e.g. a string constant, number, or keys of an enum)\n// that I've chosen to call `type` in this case (it could be 'kind', or 'foo')\n\n// Because the value is known at compile time, the compiler can 'discrminate' between\n// members of this type when you evaluate the discriminant (see example in Shapes.tsx)\nexport type Shape = Circle | Square | Rectangle;\n\nexport interface SpecialShape extends BaseShape {\n  specialProperties: SpecialProperties;\n}\n\n// TypeGuards::\n// This is an example of a user defined `typeguard`.\n// A type guard is user defined predicate on an object that\n// casts matching arguments to the specified type.\n\n// In a sense, a typeguard is another way to 'strong arm' the compiler.\n// Because it evaluates some presumably accurate condition however,\n// a well defined typeguard is preferable to typecasting\nexport const isSpecial = (shape: BaseShape): shape is SpecialShape => {\n  return (shape as any).specialProperties != null;\n};\n\n// Note that typeguards are not 'compiled away', they are evaluated\n// at run time as boolean expressions, and so can have potential performance impact.\n\n// typeguards are still typecasting however, and a poorly\n// defined one can break the guarantees of type safety:\nexport const everyoneIsSpecial = (\n  _shape: BaseShape\n): _shape is SpecialShape => {\n  return true;\n};\n\n// Records Over Union Types\n// A Record over a Union type is exhaustive, i.e.\n// every member must be present\nconst SHAPE_DESCRIPTORS: Record<ShapeType, string> = {\n  Circle: \"a round shape.\",\n  Square: \"a special rectangle.\",\n  Rectangle: \"sort of like a square.\",\n};\n\n// Partial::\n// If you want to skip some keys in any object, you can use the utility type Partial\n// The type below lets us know that even though all the keys won't be present,\n// every key in this object will be from `ShapeType`\nconst QUADRILATERAL_INFO: Partial<Record<ShapeType, string>> = {\n  Rectangle: \"It's area is given by width x height.\",\n  Square: \"It's area is given by sidelength squared!\",\n};\n\n// Pick::\n// Sort of like partial, except you specify which keys from `Type`\n// that you want to use. The properties you 'pick' have the same\n// type as the Antecedent.\nconst ELLIPSE_INFO: Pick<Record<ShapeType, string>, \"Circle\"> = {\n  Circle: \"A Circle is a special case of an ellipse!\",\n};\n\n// example usage: type gaurds, Records over unions, partial records, `in` keyword\nexport const displayShape = (shape: Shape): string => {\n  let message = `This ${shape.type} was submitted by `;\n  message += (shape.author ? shape.author.name : \"an anonymous user\") + \".\\n\";\n  message += `It is ${shape.color}.\\n`;\n  if (isSpecial(shape)) {\n    const { borderColor, label } = shape.specialProperties;\n    message += `It's border is ${borderColor}\\n`;\n    message += \"This shape's label reads:\\n\";\n    message += `${label}\\n`;\n  }\n  message += `Did you know? A ${shape.type} is ${\n    SHAPE_DESCRIPTORS[shape.type]\n  }\\n`;\n\n  if (shape.type in QUADRILATERAL_INFO) {\n    message += QUADRILATERAL_INFO[shape.type];\n  }\n\n  if (shape.type === \"Circle\") {\n    message += ELLIPSE_INFO[shape.type];\n  }\n\n  return message;\n};\n","import React from \"react\";\nimport {\n  Circle,\n  Square,\n  Rectangle,\n  Shape,\n  displayShape,\n  isSpecial,\n} from \"./lib/shape\";\nimport \"./Shape.css\";\n\n// Example: using typeguards\nconst commonProperties = (shape: Shape): React.CSSProperties => {\n  return {\n    backgroundColor: shape.color,\n    border: isSpecial(shape)\n      ? `10px solid ${shape.specialProperties.borderColor}`\n      : undefined,\n  };\n};\n\nconst circleStyles = (c: Circle) => ({\n  height: 2 * c.radius,\n  width: 2 * c.radius,\n  borderRadius: \"100%\",\n  ...commonProperties(c),\n});\n\nexport const CircleEl: React.FC<Circle> = (circle) => (\n  <div style={circleStyles(circle)}></div>\n);\n\nconst squareStyles = (s: Square): React.CSSProperties => ({\n  height: s.sideLength,\n  width: s.sideLength,\n  ...commonProperties(s),\n});\nexport const SquareEl: React.FC<Square> = (square) => (\n  <div style={squareStyles(square)}></div>\n);\n\nconst rectangleStyles = (r: Rectangle): React.CSSProperties => ({\n  width: r.width,\n  height: r.height,\n  ...commonProperties(r),\n});\nexport const RectangleEl: React.FC<Rectangle> = (rectangle) => (\n  <div style={rectangleStyles(rectangle)}></div>\n);\n\ninterface Props {\n  shape: Shape;\n  favorited?: boolean;\n  onSelectShape: (id: number) => void;\n}\n\n\n// Example:: using Discriminated Unions\nconst getShapeElement = (shape: Shape): JSX.Element => {\n  switch (shape.type) {\n    case \"Circle\":\n      return <CircleEl {...shape} />;\n    case \"Rectangle\":\n      return <RectangleEl {...shape} />;\n    case \"Square\":\n      return <SquareEl {...shape} />;\n  }\n};\n\nconst renderText = (value: string): JSX.Element => (\n  <>\n    {value.split(\"\\n\").map((value) => (\n      <div key={value}>{value}</div>\n    ))}\n  </>\n);\n\nexport const ShapeView: React.FC<Props> = ({\n  onSelectShape,\n  shape,\n  favorited,\n}): JSX.Element => {\n  const handleSelect = () => onSelectShape(shape.id);\n  const [showInfo, setShowInfo] = React.useState(false);\n\n  return (\n    <div className=\"shape-row\">\n      <div>{getShapeElement(shape)}</div>\n      <div className='action-buttons'>\n        <button onClick={() => setShowInfo(!showInfo)}>Show Info</button>\n        {!favorited && <button onClick={handleSelect}>Add To Favorites</button>}\n      </div>\n      <div>{showInfo && renderText(displayShape(shape))}</div>\n    </div>\n  );\n};\n","import { Shape } from './lib/shape'\nimport React from 'react';\nimport { ShapeView } from './Shape'\n\n\n// examples: interfaces, generics, function types\ninterface Props {\n    shapes: Shape[]\n    favorites: Set<number>\n    onSelectShape: (id: number) => void\n}\n\nexport const ShapeList: React.FC<Props> = ({shapes, favorites, onSelectShape}: Props) => \n    <div>\n        {shapes.map((shape, idx) => \n            <div key={idx}>\n                <ShapeView\n                    favorited={favorites.has(shape.id)}\n                    shape={shape}\n                    onSelectShape={onSelectShape}\n                />\n            </div>\n        )}\n    </div>","import React from \"react\";\nimport \"./App.css\";\nimport { getShapes } from \"./lib/api\";\nimport { Shape } from \"./lib/shape\";\nimport { ShapeList } from \"./ShapeList\";\n\nconst SHAPE_COUNT = 150\n\n// A string Union type\ntype AppView = \"All\" | \"Favorites\";\n\n// Example:: Record types, generic types,\nfunction App(): JSX.Element {\n  const [shapes, setShapes] = React.useState<Record<number, Shape>>({});\n  const [favorites, setFavorites] = React.useState<Set<number>>(new Set());\n  const [activeView, setView] = React.useState<AppView>(\"All\");\n\n  React.useEffect(() => {\n    setShapes(getShapes(SHAPE_COUNT));\n  }, [setShapes]);\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        Shape Center\n        <div className=\"subheader\">\n          Putting shapes, front and center\n        </div>\n      </header>\n      <ShapeList\n        favorites={favorites}\n        onSelectShape={(id) =>\n          setFavorites(new Set([...Array.from(favorites), id]))}\n        shapes={activeView === \"All\"\n          ? Object.values(shapes)\n          : Array.from(favorites.values()).map((id) => shapes[id])}\n      />\n      <button\n        className='fab'\n        onClick={() => setView(activeView === \"All\" ? \"Favorites\" : \"All\")}\n      >\n        {activeView === \"All\" ? \"Show Favorites\" : \"Show All\"}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import { shapesAPI } from '../__mock_server/server.js';\nimport { Shape } from './shape'\n/** \n    Record types::\n    Record<KeyType, ValueType> is a utility type defining an object where keys are KeyType\n    and values are ValueType,\n    For instance a Record<number, string[]> could have keys like this: \n\n    const example: Record<number, string[]>  = {\n        1: ['a', 'b', 'c'],\n        2: ['x', 'y', 'z']\n    }\n*/\n\n\nexport const getShapes = (limit: number): Record<number, Shape> => {\n    const apiData =  shapesAPI(limit)\n\n    // TypeCasting::\n    // typecasting is one of typescript's 'escape hatches'\n    // when you know more than the compiler, you can override it\n    // - typecasting should generally be avoided because makes typechecking less effective\n    // - appropriate on the edges of your application, if you're confident about your data source\n    // - a tool in the toolbox to be used sparingly\n    const decoded = JSON.parse(apiData) as Record<number, Shape>\n    console.log(decoded);\n    return decoded\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}